#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVec;
in vec3 fromLightVector;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D DuDvTexture;
uniform float moveFactor;
uniform sampler2D noralMap;
uniform vec3 lightColor;
uniform sampler2D depthTexture;
uniform float planeNear;
uniform float planeFar;

out vec4 out_Color;

const float distortionStrength = 0.02;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main(void) {
	
	vec2 normalizedDC = (clipSpace.xy/clipSpace.w) / 2.0 + 0.5;
	vec2 refractionTexCoords = vec2(normalizedDC.x, normalizedDC.y);
	vec2 reflectionTexCoords = vec2(normalizedDC.x, -normalizedDC.y);
	
	//Calculating distance from camera to the bottom
	float depth = texture(depthTexture, refractionTexCoords).r;
	float bottomDistance = 2.0 * planeNear * planeFar / (planeFar + planeNear - (2.0 * depth - 1.0) * (planeFar -planeNear)); 
	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * planeNear * planeFar / (planeFar + planeNear - (2.0 * depth - 1.0) * (planeFar -planeNear)); 
	float waterDepth = bottomDistance - waterDistance;
	
	vec2 distortedTextureCoords = texture(DuDvTexture, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTextureCoords = textureCoords + vec2(distortedTextureCoords.x, distortedTextureCoords.y + moveFactor);
	vec2 distortionTextureFinal = (texture(DuDvTexture, distortedTextureCoords).rg *2.0 - 1.0) * distortionStrength * clamp(waterDepth/10.0, 0.0, 1.0);;
	
	refractionTexCoords += distortionTextureFinal;
	//To prevent wobbly lines
	refractionTexCoords = clamp(refractionTexCoords, 0.001, 0.999);
	
	reflectionTexCoords += distortionTextureFinal;
	reflectionTexCoords.x = clamp(reflectionTexCoords.x, 0.001, 0.999);
	reflectionTexCoords.y = clamp(reflectionTexCoords.y, -0.999, -0.001);
	
	vec4 reflectionColor = texture(reflectionTexture, reflectionTexCoords);
	vec4 refractionColor = texture(refractionTexture, refractionTexCoords);
	
	vec4 normalMapColor = texture(noralMap, distortedTextureCoords);
	vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b * 3.0, normalMapColor.g * 2.0 - 1.0);
	normal = normalize(normal);
	
	vec3 viewVector = normalize(toCameraVec);
	
	float refractionFactor = dot(viewVector, vec3(normal));
	refractionFactor = pow(refractionFactor, 8.0);
	refractionFactor = clamp(refractionFactor, 0.0, 1.0);
	
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper); 
	vec3 specularHighlights = lightColor * specular * reflectivity * clamp(waterDepth/10.0, 0.0, 1.0);;
	
	out_Color = mix(reflectionColor, refractionColor, refractionFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.15) + vec4(specularHighlights, 0.0);
	out_Color.a = clamp(waterDepth/5.0, 0.0, 1.0);
}