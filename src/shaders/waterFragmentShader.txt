#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVec;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D DuDvTexture;
uniform sampler2D noralMap;
uniform vec3 lightColor;
uniform sampler2D depthTexture;

uniform float moveFactor; 

const float distortionStrength = 0.02;
const float shineDamper = 20.0;
const float reflectivity = 0.3;

void main(void) {
	
	vec2 normalizedDC = (clipSpace.xy/clipSpace.w) / 2.0 + 0.5;
	
	vec2 refractionUV = vec2(normalizedDC.x, normalizedDC.y);
	vec2 reflectionUV = vec2(normalizedDC.x, -normalizedDC.y);
	
	//Needs to be the same values as in masterRenderer class. Add functionality for this to be done automatically at some point
	float near = 0.01;
	float far = 1000.0;
	float depth = texture(depthTexture, refractionUV).r; 
	
	float bottomDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near)); 
	
	depth = gl_FragCoord.z;
	float waterDistance =  2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	float waterDepth = bottomDistance - waterDistance;
	
	vec2 distortedTexCoords = texture(DuDvTexture, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactor);
	vec2 distortionFinal = (texture(DuDvTexture, distortedTexCoords).rg *2.0 - 1.0) * 0.02 * clamp(waterDepth/15.0, 0.0, 1.0 );
	
	refractionUV += distortionFinal;
	refractionUV = clamp(refractionUV, 0.001, 0.999);
	
	reflectionUV += distortionFinal;	
	reflectionUV.x = clamp(reflectionUV.x, 0.001, 0.999);
	reflectionUV.y = clamp(reflectionUV.y, -0.999, -0.001);
	
	vec4 refractionTexture = texture(refractionTexture, refractionUV);
	vec4 reflectionTexture = texture(reflectionTexture, reflectionUV);
	
	vec4 normalMapColor = texture(noralMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColor.r * 2.0 -1.0, normalMapColor.b * 2.0, normalMapColor.g * 2.0 -1.0);
	normal = normalize(normal);
	
	vec3 viewVector = normalize(toCameraVec);
	float refractionFactor = dot(viewVector, normal);
	refractionFactor = pow(refractionFactor, 10);
	refractionFactor = clamp(refractionFactor, 0.0, 1.0);
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper); 
	vec3 specularHighlights = lightColor * specular * reflectivity * clamp(waterDepth/5.0, 0.0, 1.0 );
	
	
	
	
	//out_Color = mix(reflectionTexture, refractionTexture, refractionFactor);
	//out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.2) + vec4(specularHighlights, 0.0);
	
	//out_Color.a = clamp(waterDepth/5.0, 0.0, 1.0 );
	
	out_Color = vec4(0.0, 0.0, 1.0, 1.0);
}